{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from 'next/router';\n\nconst A = ({\n  query,\n  name\n}) => __jsx(\"div\", null, \"A \", query.id, \" \", name);\n\nA.getInitialProps = async ctx => {\n  console.log('ctx', ctx.ctx);\n  const {\n    req,\n    query\n  } = ctx.ctx;\n  const promise = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        query,\n        name: 'jock lili'\n      });\n    }, 1000);\n  });\n  const ret = await promise;\n  return ret; // return ({ query, name: 'jocky' });\n};\n\nexport default withRouter(A); // ctx 12333 {\n//   AppTree: [Function: AppTree],\n//   Component:\n//    { [Function: WithRouterWrapper]\n//      getInitialProps: [AsyncFunction],\n//      origGetInitialProps: undefined,\n//      displayName: 'withRouter(A)' },\n//   router:\n//    ServerRouter {\n//      route: '/a',\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      basePath: '',\n//      events: undefined,\n//      isFallback: false },\n//   ctx:\n//    { err: undefined,\n//      req:\n//       IncomingMessage {\n//         _readableState: [ReadableState],\n//         readable: true,\n//         _events: {},\n//         _eventsCount: 0,\n//         _maxListeners: undefined,\n//         socket: [Socket],\n//         connection: [Socket],\n//         httpVersionMajor: 1,\n//         httpVersionMinor: 1,\n//         httpVersion: '1.1',\n//         complete: true,\n//         headers: [Object],\n//         rawHeaders: [Array],\n//         trailers: {},\n//         rawTrailers: [],\n//         aborted: false,\n//         upgrade: false,\n//         url: '/a/1',\n//         method: 'GET',\n//         statusCode: null,\n//         statusMessage: null,\n//         client: [Socket],\n//         _consuming: false,\n//         _dumped: false,\n//         _parsedUrl: [Url] },\n//      res:\n//       ServerResponse {\n//         _events: [Object],\n//         _eventsCount: 2,\n//         _maxListeners: undefined,\n//         output: [],\n//         outputEncodings: [],\n//         outputCallbacks: [],\n//         outputSize: 0,\n//         writable: true,\n//         _last: false,\n//         chunkedEncoding: false,\n//         shouldKeepAlive: true,\n//         useChunkedEncodingByDefault: true,\n//         sendDate: true,\n//         _removedConnection: false,\n//         _removedContLen: false,\n//         _removedTE: false,\n//         _contentLength: null,\n//         _hasBody: true,\n//         _trailer: '',\n//         finished: false,\n//         _headerSent: false,\n//         socket: [Socket],\n//         connection: [Socket],\n//         _header: null,\n//         _onPendingData: [Function: bound updateOutgoingData],\n//         _sent100: false,\n//         _expect_continue: false,\n//         statusCode: 200,\n//         __onFinished: [Function],\n//         locals: {},\n//         flush: [Function: flush],\n//         write: [Function: write],\n//         end: [Function: end],\n//         on: [Function: on],\n//         writeHead: [Function: writeHead],\n//         [Symbol(isCorked)]: false,\n//         [Symbol(outHeadersKey)]: null },\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      AppTree: [Function: AppTree]\n//     }\n// }","map":{"version":3,"sources":["/Users/zsm/Documents/project/React/react-next-github/pages/a.js"],"names":["withRouter","A","query","name","id","getInitialProps","ctx","console","log","req","promise","Promise","resolve","setTimeout","ret"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,CAAC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsB,yBAAQD,KAAK,CAACE,EAAd,OAAmBD,IAAnB,CAAhC;;AAEAF,CAAC,CAACI,eAAF,GAAoB,MAAOC,GAAP,IAAe;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAG,CAACA,GAAvB;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOP,IAAAA;AAAP,MAAiBI,GAAG,CAACA,GAA3B;AACA,QAAMI,OAAO,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvCC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAAC;AACNV,QAAAA,KADM;AAENC,QAAAA,IAAI,EAAE;AAFA,OAAD,CAAP;AAID,KALS,EAKP,IALO,CAAV;AAMD,GAPe,CAAhB;AAQA,QAAMW,GAAG,GAAG,MAAMJ,OAAlB;AACA,SAAOI,GAAP,CAZiC,CAajC;AACD,CAdD;;AAgBA,eAAed,UAAU,CAACC,CAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { withRouter } from 'next/router';\n\nconst A = ({ query, name }) => (<div>A {query.id} {name}</div>);\n\nA.getInitialProps = async (ctx) => {\n  console.log('ctx', ctx.ctx);\n  const { req, query } = ctx.ctx;\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        query,\n        name: 'jock lili',\n      });\n    }, 1000);\n  });\n  const ret = await promise;\n  return ret;\n  // return ({ query, name: 'jocky' });\n};\n\nexport default withRouter(A);\n\n// ctx 12333 {\n//   AppTree: [Function: AppTree],\n//   Component:\n//    { [Function: WithRouterWrapper]\n//      getInitialProps: [AsyncFunction],\n//      origGetInitialProps: undefined,\n//      displayName: 'withRouter(A)' },\n//   router:\n//    ServerRouter {\n//      route: '/a',\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      basePath: '',\n//      events: undefined,\n//      isFallback: false },\n//   ctx:\n//    { err: undefined,\n//      req:\n//       IncomingMessage {\n//         _readableState: [ReadableState],\n//         readable: true,\n//         _events: {},\n//         _eventsCount: 0,\n//         _maxListeners: undefined,\n//         socket: [Socket],\n//         connection: [Socket],\n//         httpVersionMajor: 1,\n//         httpVersionMinor: 1,\n//         httpVersion: '1.1',\n//         complete: true,\n//         headers: [Object],\n//         rawHeaders: [Array],\n//         trailers: {},\n//         rawTrailers: [],\n//         aborted: false,\n//         upgrade: false,\n//         url: '/a/1',\n//         method: 'GET',\n//         statusCode: null,\n//         statusMessage: null,\n//         client: [Socket],\n//         _consuming: false,\n//         _dumped: false,\n//         _parsedUrl: [Url] },\n//      res:\n//       ServerResponse {\n//         _events: [Object],\n//         _eventsCount: 2,\n//         _maxListeners: undefined,\n//         output: [],\n//         outputEncodings: [],\n//         outputCallbacks: [],\n//         outputSize: 0,\n//         writable: true,\n//         _last: false,\n//         chunkedEncoding: false,\n//         shouldKeepAlive: true,\n//         useChunkedEncodingByDefault: true,\n//         sendDate: true,\n//         _removedConnection: false,\n//         _removedContLen: false,\n//         _removedTE: false,\n//         _contentLength: null,\n//         _hasBody: true,\n//         _trailer: '',\n//         finished: false,\n//         _headerSent: false,\n//         socket: [Socket],\n//         connection: [Socket],\n//         _header: null,\n//         _onPendingData: [Function: bound updateOutgoingData],\n//         _sent100: false,\n//         _expect_continue: false,\n//         statusCode: 200,\n//         __onFinished: [Function],\n//         locals: {},\n//         flush: [Function: flush],\n//         write: [Function: write],\n//         end: [Function: end],\n//         on: [Function: on],\n//         writeHead: [Function: writeHead],\n//         [Symbol(isCorked)]: false,\n//         [Symbol(outHeadersKey)]: null },\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      AppTree: [Function: AppTree]\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}