{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from 'next/router';\n\nvar A = function A(_ref) {\n  var query = _ref.query,\n      name = _ref.name;\n  return __jsx(\"div\", null, \"A \", query.id, \" \", name);\n};\n\n_c = A;\n\nA.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _ctx$ctx, req, query, promise, ret;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, query = _ctx$ctx.query;\n            promise = new Promise(function (resolve) {\n              setTimeout(function () {\n                resolve({\n                  query: query,\n                  name: 'jock lili'\n                });\n              }, 1000);\n            });\n            _context.next = 4;\n            return promise;\n\n          case 4:\n            ret = _context.sent;\n            return _context.abrupt(\"return\", ret);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(A); // ctx 12333 {\n//   AppTree: [Function: AppTree],\n//   Component:\n//    { [Function: WithRouterWrapper]\n//      getInitialProps: [AsyncFunction],\n//      origGetInitialProps: undefined,\n//      displayName: 'withRouter(A)' },\n//   router:\n//    ServerRouter {\n//      route: '/a',\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      basePath: '',\n//      events: undefined,\n//      isFallback: false },\n//   ctx:\n//    { err: undefined,\n//      req:\n//       IncomingMessage {\n//         _readableState: [ReadableState],\n//         readable: true,\n//         _events: {},\n//         _eventsCount: 0,\n//         _maxListeners: undefined,\n//         socket: [Socket],\n//         connection: [Socket],\n//         httpVersionMajor: 1,\n//         httpVersionMinor: 1,\n//         httpVersion: '1.1',\n//         complete: true,\n//         headers: [Object],\n//         rawHeaders: [Array],\n//         trailers: {},\n//         rawTrailers: [],\n//         aborted: false,\n//         upgrade: false,\n//         url: '/a/1',\n//         method: 'GET',\n//         statusCode: null,\n//         statusMessage: null,\n//         client: [Socket],\n//         _consuming: false,\n//         _dumped: false,\n//         _parsedUrl: [Url] },\n//      res:\n//       ServerResponse {\n//         _events: [Object],\n//         _eventsCount: 2,\n//         _maxListeners: undefined,\n//         output: [],\n//         outputEncodings: [],\n//         outputCallbacks: [],\n//         outputSize: 0,\n//         writable: true,\n//         _last: false,\n//         chunkedEncoding: false,\n//         shouldKeepAlive: true,\n//         useChunkedEncodingByDefault: true,\n//         sendDate: true,\n//         _removedConnection: false,\n//         _removedContLen: false,\n//         _removedTE: false,\n//         _contentLength: null,\n//         _hasBody: true,\n//         _trailer: '',\n//         finished: false,\n//         _headerSent: false,\n//         socket: [Socket],\n//         connection: [Socket],\n//         _header: null,\n//         _onPendingData: [Function: bound updateOutgoingData],\n//         _sent100: false,\n//         _expect_continue: false,\n//         statusCode: 200,\n//         __onFinished: [Function],\n//         locals: {},\n//         flush: [Function: flush],\n//         write: [Function: write],\n//         end: [Function: end],\n//         on: [Function: on],\n//         writeHead: [Function: writeHead],\n//         [Symbol(isCorked)]: false,\n//         [Symbol(outHeadersKey)]: null },\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      AppTree: [Function: AppTree]\n//     }\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"A\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/zsm/Documents/project/React/react-next-github/pages/a.js"],"names":["withRouter","A","query","name","id","getInitialProps","ctx","req","promise","Promise","resolve","setTimeout","ret"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;;AAEA,IAAMC,CAAC,GAAG,SAAJA,CAAI;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,IAAV,QAAUA,IAAV;AAAA,SAAsB,yBAAQD,KAAK,CAACE,EAAd,OAAmBD,IAAnB,CAAtB;AAAA,CAAV;;KAAMF,C;;AAENA,CAAC,CAACI,eAAF;AAAA,uEAAoB,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACKA,GAAG,CAACA,GADT,EACVC,GADU,YACVA,GADU,EACLL,KADK,YACLA,KADK;AAEZM,YAAAA,OAFY,GAEF,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvCC,cAAAA,UAAU,CAAC,YAAM;AACfD,gBAAAA,OAAO,CAAC;AACNR,kBAAAA,KAAK,EAALA,KADM;AAENC,kBAAAA,IAAI,EAAE;AAFA,iBAAD,CAAP;AAID,eALS,EAKP,IALO,CAAV;AAMD,aAPe,CAFE;AAAA;AAAA,mBAUAK,OAVA;;AAAA;AAUZI,YAAAA,GAVY;AAAA,6CAWXA,GAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAeA,qBAAeZ,UAAU,CAACC,CAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { withRouter } from 'next/router';\n\nconst A = ({ query, name }) => (<div>A {query.id} {name}</div>);\n\nA.getInitialProps = async (ctx) => {\n  const { req, query } = ctx.ctx;\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        query,\n        name: 'jock lili',\n      });\n    }, 1000);\n  });\n  const ret = await promise;\n  return ret;\n  // return ({ query, name: 'jocky' });\n};\n\nexport default withRouter(A);\n\n// ctx 12333 {\n//   AppTree: [Function: AppTree],\n//   Component:\n//    { [Function: WithRouterWrapper]\n//      getInitialProps: [AsyncFunction],\n//      origGetInitialProps: undefined,\n//      displayName: 'withRouter(A)' },\n//   router:\n//    ServerRouter {\n//      route: '/a',\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      basePath: '',\n//      events: undefined,\n//      isFallback: false },\n//   ctx:\n//    { err: undefined,\n//      req:\n//       IncomingMessage {\n//         _readableState: [ReadableState],\n//         readable: true,\n//         _events: {},\n//         _eventsCount: 0,\n//         _maxListeners: undefined,\n//         socket: [Socket],\n//         connection: [Socket],\n//         httpVersionMajor: 1,\n//         httpVersionMinor: 1,\n//         httpVersion: '1.1',\n//         complete: true,\n//         headers: [Object],\n//         rawHeaders: [Array],\n//         trailers: {},\n//         rawTrailers: [],\n//         aborted: false,\n//         upgrade: false,\n//         url: '/a/1',\n//         method: 'GET',\n//         statusCode: null,\n//         statusMessage: null,\n//         client: [Socket],\n//         _consuming: false,\n//         _dumped: false,\n//         _parsedUrl: [Url] },\n//      res:\n//       ServerResponse {\n//         _events: [Object],\n//         _eventsCount: 2,\n//         _maxListeners: undefined,\n//         output: [],\n//         outputEncodings: [],\n//         outputCallbacks: [],\n//         outputSize: 0,\n//         writable: true,\n//         _last: false,\n//         chunkedEncoding: false,\n//         shouldKeepAlive: true,\n//         useChunkedEncodingByDefault: true,\n//         sendDate: true,\n//         _removedConnection: false,\n//         _removedContLen: false,\n//         _removedTE: false,\n//         _contentLength: null,\n//         _hasBody: true,\n//         _trailer: '',\n//         finished: false,\n//         _headerSent: false,\n//         socket: [Socket],\n//         connection: [Socket],\n//         _header: null,\n//         _onPendingData: [Function: bound updateOutgoingData],\n//         _sent100: false,\n//         _expect_continue: false,\n//         statusCode: 200,\n//         __onFinished: [Function],\n//         locals: {},\n//         flush: [Function: flush],\n//         write: [Function: write],\n//         end: [Function: end],\n//         on: [Function: on],\n//         writeHead: [Function: writeHead],\n//         [Symbol(isCorked)]: false,\n//         [Symbol(outHeadersKey)]: null },\n//      pathname: '/a',\n//      query: { id: '1' },\n//      asPath: '/a/1',\n//      AppTree: [Function: AppTree]\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}